package com.horizen.block

import com.horizen.utils.BytesUtils
import org.junit.Test
import org.scalatest.junit.JUnitSuite
import org.junit.Assert._

// TODO: extend this test with real cases for: certificate with no withdrawals, with 1, with multiple.
class CertificateTest extends JUnitSuite {

  @Test
  def emptyCertificate(): Unit = {
    //zen-cli.exe -datadir=../examples/simpleapp/target/tmp/node0 -regtest  send_certificate "0000000000000000000000000000000000000000000000000000000000000001" 0 7 "0dd47302855895dd9087b490db6f49621ff40a11fa136de9bfc776a17f814dbe" "54a3666bbc880c5bc0a0116faf62546e1933a0a639e9a727df1b1ec6b9c24d55c2be2ded2a84b1bfb491c7d2b12f136821645a8738e518f863346fadecece2e27c168dfc3f4b08215c664529fd4f44b2d5ffd22be81c3516c354b2c0cd6900002b7caa68c280e046961e20e4b72c2a38950a2791d178e244ebf8b2ac3148aba079ba184b4fe8f1f3b03c96ec66fa809bc4f0f755c2ff31251a7326bce8b08b6ea1b18c5194a0b08b2e982ea4ade43b098874bd57fb29102afe17d1c82b55010000fc0dddf1e7266c7e5cabc735342cf372b77ab6a440739357602951f199c2926c99e6dc1bd8f0473a95416032379ecad974f53804c2705f89423e418cbd98ba6f332b821e585afc0f31d8fe6c1d3ac93b28e1b769285c269ddc4f9657e3140000a4fdd3a1152f1a14decdfae4f9200eac4d12e46285f4bea7871de070744ec2a92de84dabaf1581dd846adb3bdb43e0031a794064be2204d1a2559c8200880f215e03c536d04de51c743d0ed42d33ec726c2747985d49a0ce9c545eae361f0000f9584651cea77ed2fb19a81a576693418549791fcc29a5f6c63652d4dd2228420ec6443d1621e41859214db0d9970b40c69023414fb4ca793286b37125483b630e88f3cb6386e87aee7017aee11d0c077f189c3272f0ad9424ca28376e7c00009576152e60203a4e37c40cfb132c4ad85291cbd869784ff4551f3d12498140bff247ebad5622e64d54e4c0f010f7f38e83d390d49af868fef2266ed2891541ccfd117a3b5e13da711c02bdae446b7ebfee3fa9d666880d57f78c8b12540c00000056673e23231f244c099bffb1f573d8e427ea10dfdd94c86612fe7a3a90ed4c3595db4f98a3f0c4cf0cae96699bf7383c33b58413b5181c278933a5bf730f2a18895830a9775218a9544dbd7f2bba5276c9676cef84e59fe0de27e9e55a5f000021637675c076fd4488c06f76b0765da43c766c0b9f859d9af777ab5ec10b2a5d76453f8da0695a15ec5d25bcc870385fd4ee7620c59ab75d2643f68ed96f2439718756353fb48c0435f7cafc1fb41bf1c9fb660e9b27cbf7548db65f9fac010000" "[]" 0.00001
    val emptyCertHex: String = "fbffffff0100000000000000000000000000000000000000000000000000000000000000000000000700000000000000be4d817fa176c7bfe96d13fa110af41f62496fdb90b48790dd9558850273d40d54a3666bbc880c5bc0a0116faf62546e1933a0a639e9a727df1b1ec6b9c24d55c2be2ded2a84b1bfb491c7d2b12f136821645a8738e518f863346fadecece2e27c168dfc3f4b08215c664529fd4f44b2d5ffd22be81c3516c354b2c0cd6900002b7caa68c280e046961e20e4b72c2a38950a2791d178e244ebf8b2ac3148aba079ba184b4fe8f1f3b03c96ec66fa809bc4f0f755c2ff31251a7326bce8b08b6ea1b18c5194a0b08b2e982ea4ade43b098874bd57fb29102afe17d1c82b55010000fc0dddf1e7266c7e5cabc735342cf372b77ab6a440739357602951f199c2926c99e6dc1bd8f0473a95416032379ecad974f53804c2705f89423e418cbd98ba6f332b821e585afc0f31d8fe6c1d3ac93b28e1b769285c269ddc4f9657e3140000a4fdd3a1152f1a14decdfae4f9200eac4d12e46285f4bea7871de070744ec2a92de84dabaf1581dd846adb3bdb43e0031a794064be2204d1a2559c8200880f215e03c536d04de51c743d0ed42d33ec726c2747985d49a0ce9c545eae361f0000f9584651cea77ed2fb19a81a576693418549791fcc29a5f6c63652d4dd2228420ec6443d1621e41859214db0d9970b40c69023414fb4ca793286b37125483b630e88f3cb6386e87aee7017aee11d0c077f189c3272f0ad9424ca28376e7c00009576152e60203a4e37c40cfb132c4ad85291cbd869784ff4551f3d12498140bff247ebad5622e64d54e4c0f010f7f38e83d390d49af868fef2266ed2891541ccfd117a3b5e13da711c02bdae446b7ebfee3fa9d666880d57f78c8b12540c00000056673e23231f244c099bffb1f573d8e427ea10dfdd94c86612fe7a3a90ed4c3595db4f98a3f0c4cf0cae96699bf7383c33b58413b5181c278933a5bf730f2a18895830a9775218a9544dbd7f2bba5276c9676cef84e59fe0de27e9e55a5f000021637675c076fd4488c06f76b0765da43c766c0b9f859d9af777ab5ec10b2a5d76453f8da0695a15ec5d25bcc870385fd4ee7620c59ab75d2643f68ed96f2439718756353fb48c0435f7cafc1fb41bf1c9fb660e9b27cbf7548db65f9fac010000010b22133a9a03fa5a137ace06923b8bb0aa290b10f540401176e4a3e3290ea195000000006a4730440220633f69f5adef62ee1cac3d0ad760bebc5cb2a1e91d9468fb2ca9cea8be96734402206f61be8eca4760d1bbfaaac70b7c472f9a2beb083d4c4386e081702aeac97fbf0121025052fe8be792cab34422ef3cc8f61aa5b3713767469eb61d0dc12b17929af3d9ffffffff0160677d01000000003c76a914429575e060e663fc4047fcd976342f5a09381bd088ac20bb1acf2c1fc1228967a611c7db30632098f0c641855180b5fe23793b72eea50d00b400"

    val bytes: Array[Byte] = BytesUtils.fromHexString(emptyCertHex)

    val cert: WithdrawalEpochCertificate = WithdrawalEpochCertificate.parse(bytes, 0)

    assertEquals("Certificate epoch number is different.", 0, cert.epochNumber)
    assertEquals("Certificate end block hash is different.", "0dd47302855895dd9087b490db6f49621ff40a11fa136de9bfc776a17f814dbe", BytesUtils.toHexString(cert.endEpochBlockHash))
    assertEquals("Certificate sidechain id is wrong", "0000000000000000000000000000000000000000000000000000000000000001", BytesUtils.toHexString(cert.sidechainId))
    assertEquals("Version is wrong", -5, cert.version)
    assertEquals("Quality is wrong", 7, cert.quality)
    assertEquals("Transaction input size is wrong", 1, cert.transactionInputs.size)
    assertEquals("Transaction output size is wrong", 1, cert.transactionOutputs.size)

    assertEquals("Certificate backward transfer amount is different.", 0, cert.backwardTransferOutputs.size)
  }

  @Test
  def nonEmptyCertificate(): Unit = {
    //zen-cli.exe -datadir=../examples/simpleapp/target/tmp/node0 -regtest  send_certificate "0000000000000000000000000000000000000000000000000000000000000001" 1 7 "059650e8dddcc8522d76af0d087c1d478b2668fc4cfbf3cb492dd022bce6f315" "edb5861923c765115a1fefe8b5e7889ac74910efc38e3a786bd5af0f6e39e5420723a16fcf3a25de8904acfed2aa74e4af28a8080e5dfecb77d03fbb5e0247efb411b65de7bb868148c399206a3ea2eaabcf947e158d5ebcdbafab63d60f010032e89bf4f9471c49ea33e8a0264570abd4e6dc856c056840f4f3cb682e592b647c31f4368b82d3deaa1d30e5de8b7e361f8334897077138527ae3409d524fb65c911ad34423445973fbaf75c382b04e46464ea0132e913473f2ef273cc1d010000589f3cba217f63f18b3342884ae2ebf42f1e772e9f4aa44fb67c0de329024e64a06cede33570a78d02cea6fba5c6a67943d74f54942fc30e8c6a912ebd69bb4ccf454392d1c0f59d662efa0ac46296bc38cee155436d1ffb3c294870e3d6000008c24b9b9c9e8437bf46fffdb80f6af6fc75049c13f5757f640a19039844607e2a291d8f97dd9d11271193d74a609f597c8abd6b43e2b078deed673aa0ccd04af560ece8d2a405b2f35a446704953d95b919761ba5e16d300b8685d02cad0000444097c37a61991c3f893e3dac1d175b585a9402bda770c0edf6199980c9f724a09e2c20e422710d05e2d4fd89223235d8e2913e38cd8624bffdb00052ebcbe0a5c58fb14e90de51e4c4c10fb2490bfaf9d1b902b82d8d36de81a4d4759200009fcb82a7d504fda53d6ad313ec56243712d74933d1e420a3b72bc1036e22575626367a60f81dc785cf2b578459065fd30aa7410d4628cf7d6a7637236367732913f985206bc126120895e4b767366580dda8ae86e79dfaf633a8d6e5a97200000024700b59d475404ea400762d6abc8009d24c7071d91fa521ebab8ce37755a5a2e25b5f1c4f61fc72f4341f6482cc22707e8b127aecb60673d1c504f0aa040a5ae8f26a6b8e4a90eaef2c84cdea954a2680f9aaec161c70241b7db24dc9a500007de59666f4008df78308a9880f904c171c32a5c8363bb025628c2f5d9cfaa714b8bf01c58e55416c888453de3288cee2587cfb700be7046fc248a4abf3770631c639cc81d84c756cc3e7dc009f7f898604305058f6eb32db022abcb96fb2010000" "[{\"pubkeyhash\":\"d01b38095a2f3476d9fc4740fc63e660e0759542\",\"amount\":\"7\"},{\"pubkeyhash\":\"a1a69c439e033b0eb3feb4dcbdd54ad2a4bc715a\",\"amount\":\"3\"}]" 0.00001
    val nonEmptyCertHex: String = "fbffffff010000000000000000000000000000000000000000000000000000000000000001000000070000000000000015f3e6bc22d02d49cbf3fb4cfc68268b471d7c080daf762d52c8dcdde8509605edb5861923c765115a1fefe8b5e7889ac74910efc38e3a786bd5af0f6e39e5420723a16fcf3a25de8904acfed2aa74e4af28a8080e5dfecb77d03fbb5e0247efb411b65de7bb868148c399206a3ea2eaabcf947e158d5ebcdbafab63d60f010032e89bf4f9471c49ea33e8a0264570abd4e6dc856c056840f4f3cb682e592b647c31f4368b82d3deaa1d30e5de8b7e361f8334897077138527ae3409d524fb65c911ad34423445973fbaf75c382b04e46464ea0132e913473f2ef273cc1d010000589f3cba217f63f18b3342884ae2ebf42f1e772e9f4aa44fb67c0de329024e64a06cede33570a78d02cea6fba5c6a67943d74f54942fc30e8c6a912ebd69bb4ccf454392d1c0f59d662efa0ac46296bc38cee155436d1ffb3c294870e3d6000008c24b9b9c9e8437bf46fffdb80f6af6fc75049c13f5757f640a19039844607e2a291d8f97dd9d11271193d74a609f597c8abd6b43e2b078deed673aa0ccd04af560ece8d2a405b2f35a446704953d95b919761ba5e16d300b8685d02cad0000444097c37a61991c3f893e3dac1d175b585a9402bda770c0edf6199980c9f724a09e2c20e422710d05e2d4fd89223235d8e2913e38cd8624bffdb00052ebcbe0a5c58fb14e90de51e4c4c10fb2490bfaf9d1b902b82d8d36de81a4d4759200009fcb82a7d504fda53d6ad313ec56243712d74933d1e420a3b72bc1036e22575626367a60f81dc785cf2b578459065fd30aa7410d4628cf7d6a7637236367732913f985206bc126120895e4b767366580dda8ae86e79dfaf633a8d6e5a97200000024700b59d475404ea400762d6abc8009d24c7071d91fa521ebab8ce37755a5a2e25b5f1c4f61fc72f4341f6482cc22707e8b127aecb60673d1c504f0aa040a5ae8f26a6b8e4a90eaef2c84cdea954a2680f9aaec161c70241b7db24dc9a500007de59666f4008df78308a9880f904c171c32a5c8363bb025628c2f5d9cfaa714b8bf01c58e55416c888453de3288cee2587cfb700be7046fc248a4abf3770631c639cc81d84c756cc3e7dc009f7f898604305058f6eb32db022abcb96fb2010000011c5b538885385d7004b258fc2dc72e3fc7a9c85ef592c84c4330bc9c4e6bb13d000000006a47304402206bfb62078dc4212152a5fbf56ad991a0028697312a4249bd00f3de700bd28986022020bbdd841fd1e3d5cec38cc42b60c34cdb5709d2cf9e1d553bfada2463460dd101210351e6fabaca6d7c63134b3e01154748c3c83ecfd12c05223ad86bee3c2f4fda4bffffffff0178637d01000000003c76a91418cb0d5876875433b1fff0d5bb4c7123331a58c388ac20bb1acf2c1fc1228967a611c7db30632098f0c641855180b5fe23793b72eea50d00b4020027b92900000000429575e060e663fc4047fcd976342f5a09381bd000a3e111000000005a71bca4d24ad5bddcb4feb30e3b039e439ca6a1"

    val bytes: Array[Byte] = BytesUtils.fromHexString(nonEmptyCertHex)

    val cert: WithdrawalEpochCertificate = WithdrawalEpochCertificate.parse(bytes, 0)

    assertEquals("Certificate epoch number is different.", 1, cert.epochNumber)
    assertEquals("Certificate end block hash is different.", "059650e8dddcc8522d76af0d087c1d478b2668fc4cfbf3cb492dd022bce6f315", BytesUtils.toHexString(cert.endEpochBlockHash))
    assertEquals("Certificate sidechain id is wrong", "0000000000000000000000000000000000000000000000000000000000000001", BytesUtils.toHexString(cert.sidechainId))
    assertEquals("Quality is wrong", 7, cert.quality)
    assertEquals("Version is wrong", -5, cert.version)

    assertEquals("Transaction input size is wrong", 1, cert.transactionInputs.size)
    assertEquals("Transaction output size is wrong", 1, cert.transactionOutputs.size)

    assertEquals("Certificate backward transfer amount is different.", 2, cert.backwardTransferOutputs.size)
    assertEquals("Amount for first backward transfer is wrong", 700000000, cert.backwardTransferOutputs.head.amount)
    assertEquals("Output bytes for first backward transfer are wrong", "0027b92900000000429575e060e663fc4047fcd976342f5a09381bd0", BytesUtils.toHexString(cert.backwardTransferOutputs.head.outputBytes))
    assertEquals("Pub key hash for second backward transfer are wrong", "5a71bca4d24ad5bddcb4feb30e3b039e439ca6a1", BytesUtils.toHexString(cert.backwardTransferOutputs(1).pubKeyHash))
  }
}
